{"version":3,"sources":["views/home/Home.tsx"],"names":["Countdown","Statistic","getWords","mode","propWords","length","WORDS","getCountdownStr","value","minutes","Math","floor","secs","storeConnect","props","useState","loading","setLoading","deadline","setDeadline","actingWordIndex","setActingWordIndex","wordArr","setWordArr","wordInput","setWordInput","typingEnd","setTypingEnd","wordsBaseRef","useRef","$state","root","wordsMode","customerWords","mainWindowEl","mainInputEl","wordIndexRef","lineIndexLockRef","nextLineStartIndexRef","lineCountRef","timeStartRef","oneLineHeightRef","keystrokeCountRef","countdownTimeRef","parseInt","countdownTime","current","deadlineText","setDeadlineText","pushWordToArr","isInit","arr","wordsTemp","isCorrect","concat","checkInputVal","inputArr","target","forEach","char","index","charAt","reloadBtn","useCallback","i","rIndex","random","temp","shuffle","setTimeout","focus","useEffect","wordContainerRow","lastElementChild","outterScrollTop","scrollTop","Array","from","children","child","offsetHeight","childTopToParent","offsetTop","showsSecLine","isNextLineCheck","time","Date","now","countDownStart","trim","tempArr","targetWord","text","className","justify","align","flex","uiScale","spinning","delay","wrapperClassName","ref","gutter","map","item","key","label","onChange","evt","onKeyUp","keyCode","content","defaultValue","test","String","onVisibleChange","$dispatch","overlayClassName","placement","title","trigger","format","onFinish","console","log","onClick","type","icon","span","round","filter","word"],"mappings":"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","file":"static/js/6.e4a39a13.chunk.js","sourcesContent":["import { Input, Row, Col, Statistic, Button, Spin, Popover, InputNumber } from 'antd';\nimport { ReloadOutlined } from '@ant-design/icons';\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\n\nimport './Home.less';\nimport { storeConnect, MapState, MapDispatch } from '@/store/index';\nimport WORDS, { Word } from '@/words';\n\nconst { Countdown } = Statistic;\n\nconst shuffle = (arr: any[]) => {\n    for (let i = arr.length - 1; i >= 0; i--) {\n        let rIndex = Math.floor(Math.random() * (i + 1));\n        let temp = arr[rIndex];\n        arr[rIndex] = arr[i];\n        arr[i] = temp;\n    }\n    return arr;\n};\nconst getWords = (mode: string, propWords: Word[]) => {\n    if (mode !== '1' && propWords && propWords.length !== 0) {\n        return propWords;\n    } else {\n        return WORDS;\n    }\n};\nconst getCountdownStr = (value: number) => {\n    const minutes = Math.floor(value / 60);\n    const secs = value % 60;\n    return `${minutes}:${secs < 10 ? '0' : ''}${secs}`;\n};\n\nconst Home: React.FC<MapState & MapDispatch> = (props) => {\n    const [loading, setLoading] = useState(true);\n    const [deadline, setDeadline] = useState(0);\n    const [actingWordIndex, setActingWordIndex] = useState(0);\n    const [wordArr, setWordArr] = useState<Array<Word & { isCorrect: boolean | null }>>([]);\n    const [wordInput, setWordInput] = useState('');\n    const [typingEnd, setTypingEnd] = useState(false);\n    const wordsBaseRef = useRef(\n        getWords(props.$state.root.wordsMode, props.$state.root.customerWords)\n    );\n    const mainWindowEl = useRef(null);\n    const mainInputEl = useRef(null);\n    const wordIndexRef = useRef(0); // WORDS数组的下标\n    const lineIndexLockRef = useRef(false); // 是否设置过第二行开头元素的下标\n    const nextLineStartIndexRef = useRef(0);\n    const lineCountRef = useRef(0);\n    const timeStartRef = useRef(false);\n    const oneLineHeightRef = useRef(53);\n    const keystrokeCountRef = useRef(0);\n    const countdownTimeRef = useRef(parseInt(props.$state.root.countdownTime, 10));\n    const [deadlineText, setDeadlineText] = useState(getCountdownStr(countdownTimeRef.current));\n\n    const countDownStart = () => {\n        const time = countdownTimeRef.current;\n        setDeadline(Date.now() + time * 1000);\n    };\n    const pushWordToArr = (isInit?: boolean) => {\n        setWordArr((arr) => {\n            const wordsTemp = [...wordsBaseRef.current];\n            if (isInit) {\n                wordIndexRef.current = 0;\n                return [{ isCorrect: null, ...wordsTemp[wordIndexRef.current] }];\n            } else {\n                wordIndexRef.current += 1;\n                if (wordIndexRef.current >= wordsTemp.length) wordIndexRef.current = 0;\n                return arr.concat({ isCorrect: null, ...wordsTemp[wordIndexRef.current] });\n            }\n        });\n    };\n    const checkInputVal = (inputArr: string[], target: string) => {\n        let isCorrect = true;\n        inputArr.forEach((char, index) => {\n            if (target.charAt(index) !== char) {\n                isCorrect = false;\n            }\n        });\n        return isCorrect;\n    };\n    const inputCountdownTime = (value?: number) => {\n        if (value && /^\\d+$/g.test(String(value))) {\n            countdownTimeRef.current = value;\n            setDeadlineText(getCountdownStr(value));\n        }\n    };\n    const onCountdonwFinish = () => {\n        if (timeStartRef.current) {\n            setTypingEnd(true);\n            console.log(wordArr);\n        }\n    };\n    const reloadBtn = useCallback(() => {\n        lineIndexLockRef.current = false;\n        lineCountRef.current = 0;\n        timeStartRef.current = false;\n        keystrokeCountRef.current = 0;\n        setTypingEnd(false);\n        setWordInput('');\n        setActingWordIndex(0);\n        wordsBaseRef.current = shuffle(wordsBaseRef.current);\n        pushWordToArr(true);\n        setTimeout(() => {\n            (mainInputEl.current as any).focus();\n        }, 10);\n    }, []);\n    const mainInputKeyUp = (evt: React.KeyboardEvent) => {\n        if (evt.keyCode === 13) reloadBtn();\n        if (typingEnd) return;\n        keystrokeCountRef.current += 1;\n    };\n\n    useEffect(() => {\n        if (mainWindowEl) {\n            const wordContainerRow = (mainWindowEl.current as any).lastElementChild;\n            if (!wordContainerRow || !wordContainerRow.lastElementChild) return;\n            const outterScrollTop = (mainWindowEl.current as any).scrollTop;\n            Array.from(wordContainerRow.children).forEach((child: any, index: number) => {\n                oneLineHeightRef.current = child.offsetHeight;\n                const childTopToParent = child.offsetTop - wordContainerRow.offsetTop;\n                const showsSecLine = oneLineHeightRef.current + outterScrollTop;\n                const isNextLineCheck = // 判断是不是显示的两行中的第二行，存在小数公差\n                    showsSecLine - 5 < childTopToParent && childTopToParent < showsSecLine + 5;\n                if (!lineIndexLockRef.current && isNextLineCheck) {\n                    nextLineStartIndexRef.current = index;\n                    lineIndexLockRef.current = true;\n                }\n            });\n            if (\n                wordContainerRow.lastElementChild.offsetTop -\n                    wordContainerRow.offsetTop -\n                    outterScrollTop <\n                oneLineHeightRef.current * 3 + 1\n            ) {\n                pushWordToArr();\n            }\n        }\n    }, [wordArr.length]);\n\n    useEffect(() => {\n        if (typingEnd) return;\n        if (wordInput === '') {\n            setWordArr((arr) => {\n                const tempArr = [...arr];\n                if (tempArr[actingWordIndex]) {\n                    tempArr[actingWordIndex].isCorrect = null;\n                }\n                return tempArr;\n            });\n            return;\n        }\n        if (!timeStartRef.current) countDownStart();\n        timeStartRef.current = true;\n        const inputArr = Array.from(wordInput.trim());\n        if (wordInput[wordInput.length - 1] === ' ') {\n            setWordInput('');\n            if (inputArr.length === 0) return;\n            setWordArr((arr) => {\n                let tempArr = [...arr];\n                const targetWord = tempArr[actingWordIndex];\n                const isCorrect = checkInputVal(inputArr, targetWord.text);\n                tempArr[actingWordIndex].isCorrect =\n                    isCorrect && inputArr.length === targetWord.text.length;\n                return tempArr;\n            });\n            setActingWordIndex(actingWordIndex + 1);\n            if (actingWordIndex + 1 === nextLineStartIndexRef.current) {\n                lineCountRef.current += 1;\n                (mainWindowEl.current as any).scrollTop =\n                    oneLineHeightRef.current * lineCountRef.current;\n                lineIndexLockRef.current = false;\n                pushWordToArr();\n            }\n        } else {\n            setWordArr((arr) => {\n                const tempArr = [...arr];\n                const targetWord = tempArr[actingWordIndex];\n                const isCorrect = checkInputVal(inputArr, targetWord.text);\n                tempArr[actingWordIndex].isCorrect = isCorrect === false ? false : null;\n                return tempArr;\n            });\n        }\n    }, [actingWordIndex, typingEnd, wordInput]);\n\n    useEffect(() => {\n        wordsBaseRef.current = getWords(\n            props.$state.root.wordsMode,\n            props.$state.root.customerWords\n        );\n        setTimeout(() => {\n            reloadBtn();\n            setLoading(false);\n        }, 1000);\n    }, [props.$state.root.wordsMode, props.$state.root.customerWords, reloadBtn]);\n\n    return (\n        <div className=\"home\">\n            <Row justify=\"center\" align=\"middle\">\n                <Col flex=\"450px\" className={`home-scale-box-${props.$state.root.uiScale}`}>\n                    <div className=\"home-show-main\">\n                        {typingEnd && <div className=\"type-end\"></div>}\n                        <Spin spinning={loading} delay={50} wrapperClassName=\"loading-wrapper\">\n                            <div className=\"home-show-main-window\" ref={mainWindowEl}>\n                                <Row gutter={12}>\n                                    {wordArr.map((item, index) => (\n                                        <Col\n                                            key={index}\n                                            className={`home-show-main-window-item ${\n                                                item.isCorrect === true ? 'correct' : ''\n                                            } ${item.isCorrect === false ? 'incorrect' : ''}`}\n                                        >\n                                            <div\n                                                className={`home-show-main-window--label ${\n                                                    actingWordIndex === index ? 'acting' : ''\n                                                }`}\n                                            >\n                                                {item.label}\n                                            </div>\n                                            <div className=\"home-show-main-window--text\">\n                                                {item.text}\n                                            </div>\n                                        </Col>\n                                    ))}\n                                </Row>\n                            </div>\n                        </Spin>\n                    </div>\n                    <Row justify=\"space-between\" align=\"middle\" gutter={0}>\n                        <Col flex=\"285px\">\n                            <Input\n                                className=\"home-input\"\n                                ref={mainInputEl}\n                                value={wordInput}\n                                onChange={(evt) => {\n                                    setWordInput(evt.target.value);\n                                }}\n                                onKeyUp={mainInputKeyUp}\n                            ></Input>\n                        </Col>\n                        <Col flex=\"90px\">\n                            <Popover\n                                content={\n                                    <div>\n                                        <InputNumber\n                                            defaultValue={countdownTimeRef.current}\n                                            onChange={inputCountdownTime}\n                                        ></InputNumber>\n                                        <span>秒</span>\n                                    </div>\n                                }\n                                onVisibleChange={() =>\n                                    props.$dispatch(\n                                        'setCountdownTime',\n                                        String(countdownTimeRef.current)\n                                    )\n                                }\n                                overlayClassName=\"home-countdown-popover\"\n                                placement=\"bottom\"\n                                title=\"\"\n                                trigger=\"click\"\n                            >\n                                <div className=\"home-countdown\">\n                                    <Countdown\n                                        className=\"home-countdown-main\"\n                                        value={deadline}\n                                        format=\"m:ss\"\n                                        onFinish={onCountdonwFinish}\n                                    ></Countdown>\n                                    <div\n                                        className={`home-countdown-placeholder ${\n                                            timeStartRef.current ? 'time-run' : ''\n                                        }`}\n                                    >\n                                        {deadlineText}\n                                    </div>\n                                </div>\n                            </Popover>\n                        </Col>\n                        <Col flex=\"50px\">\n                            <Button\n                                className=\"home-reload-btn\"\n                                onClick={reloadBtn}\n                                type=\"primary\"\n                                icon={<ReloadOutlined />}\n                            />\n                        </Col>\n                    </Row>\n                    {typingEnd && (\n                        <Row className=\"home-type-result\">\n                            <Col span={24}>\n                                <div className=\"result-wpm\">\n                                    {Math.round(\n                                        wordArr.filter((word) => word.isCorrect !== null).length /\n                                            (countdownTimeRef.current / 60)\n                                    )}\n                                    WPM\n                                </div>\n                            </Col>\n                            <Col span={12}>\n                                <div className=\"result-title\">正确</div>\n                            </Col>\n                            <Col span={12}>\n                                <div className=\"result-numbers correct\">\n                                    {wordArr.filter((word) => word.isCorrect === true).length}\n                                </div>\n                            </Col>\n                            <Col span={12}>\n                                <div className=\"result-title\">错误</div>\n                            </Col>\n                            <Col span={12}>\n                                <div className=\"result-numbers wrong\">\n                                    {wordArr.filter((word) => word.isCorrect === false).length}\n                                </div>\n                            </Col>\n                            <Col span={12}>\n                                <div className=\"result-title\">按键总数</div>\n                            </Col>\n                            <Col span={12}>\n                                <div className=\"result-numbers\">{keystrokeCountRef.current}</div>\n                            </Col>\n                        </Row>\n                    )}\n                </Col>\n            </Row>\n        </div>\n    );\n};\n\nexport default storeConnect(Home);\n"],"sourceRoot":""}