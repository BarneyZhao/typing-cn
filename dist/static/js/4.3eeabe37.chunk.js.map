{"version":3,"sources":["utils/wordTool.ts","../node_modules/@ant-design/icons-svg/es/asn/ReloadOutlined.js","../node_modules/@ant-design/icons/es/icons/ReloadOutlined.js","views/monkey/Monkey.tsx"],"names":["wordTool","shuffle","arr","i","length","rIndex","Math","floor","random","temp","getWords","mode","propWords","jsonCopy","WORDS","obj","JSON","parse","stringify","ReloadOutlined","props","ref","React","AntdIcon","Object","assign","icon","ReloadOutlinedSvg","displayName","getCurrentWordEl","mEl","Array","from","children","storeConnect","inputEl","useRef","mainEl","caretElRef","wordsBaseRef","$state","root","wordsMode","customerWords","coordinateRef","typeResultRef","wpm","right","wrong","acc","time","begin","secs","useState","isTyping","setIsTyping","isCaretFlash","setIsCaretFlash","isFadingTypeMain","setIsFadingTypeMain","showTypeResult","setShowTypeResult","userInput","setUserInput","wordArr","setWordArr","top","left","caretLocation","setCaretLocation","wordCount","setWordCount","setCaret","coordinate","current","mainElRect","getBoundingClientRect","currentWordEl","currentLetterArr","getElementsByClassName","letterRect","width","inputForwardFunc","useCallback","keyCode","inputVal","newCoordinate","isNewWordInputing","charAt","letterArr","codeEl","document","createElement","className","innerText","appendChild","_wordArr","letterObj","isCorrect","letter","some","l","isSkip","extraLetterArr","every","filter","w","round","Date","now","toFixed","setTimeout","v","backspaceFunc","deleteChar","lIndex","findIndex","removeChild","canDelete","substring","focusToInput","focus","reloadWord","forEach","etl","parentNode","slice","map","word","text","useEffect","Group","value","size","onChange","e","target","Button","tabIndex","justify","align","flex","style","transform","onClick","wi","key","label","li","type","onKeyDown","evt","preventDefault","stopPropagation","persist","onBlur","onFocus","gutter","span"],"mappings":"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","file":"static/js/4.3eeabe37.chunk.js","sourcesContent":["import WORDS, { Word } from '@/words';\n\nconst wordTool = {\n    shuffle(arr: any[]) {\n        for (let i = arr.length - 1; i >= 0; i--) {\n            let rIndex = Math.floor(Math.random() * (i + 1));\n            let temp = arr[rIndex];\n            arr[rIndex] = arr[i];\n            arr[i] = temp;\n        }\n        return arr;\n    },\n    getWords(mode: string, propWords: Word[]) {\n        if (mode !== '1' && propWords && propWords.length !== 0) {\n            return wordTool.jsonCopy<Word[]>(propWords);\n        } else {\n            return wordTool.jsonCopy<Word[]>(WORDS);\n        }\n    },\n    jsonCopy<T>(obj: object) {\n        return JSON.parse(JSON.stringify(obj)) as T;\n    },\n};\n\nexport type WordType = Word;\nexport default wordTool;\n","// This icon file is generated automatically.\n// tslint:disable\nvar ReloadOutlined = { \"name\": \"reload\", \"theme\": \"outlined\", \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M909.1 209.3l-56.4 44.1C775.8 155.1 656.2 92 521.9 92 290 92 102.3 279.5 102 511.5 101.7 743.7 289.8 932 521.9 932c181.3 0 335.8-115 394.6-276.1 1.5-4.2-.7-8.9-4.9-10.3l-56.7-19.5a8 8 0 00-10.1 4.8c-1.8 5-3.8 10-5.9 14.9-17.3 41-42.1 77.8-73.7 109.4A344.77 344.77 0 01655.9 829c-42.3 17.9-87.4 27-133.8 27-46.5 0-91.5-9.1-133.8-27A341.5 341.5 0 01279 755.2a342.16 342.16 0 01-73.7-109.4c-17.9-42.4-27-87.4-27-133.9s9.1-91.5 27-133.9c17.3-41 42.1-77.8 73.7-109.4 31.6-31.6 68.4-56.4 109.3-73.8 42.3-17.9 87.4-27 133.8-27 46.5 0 91.5 9.1 133.8 27a341.5 341.5 0 01109.3 73.8c9.9 9.9 19.2 20.4 27.8 31.4l-60.2 47a8 8 0 003 14.1l175.6 43c5 1.2 9.9-2.6 9.9-7.7l.8-180.9c-.1-6.6-7.8-10.3-13-6.2z\" } }] } };\nexport default ReloadOutlined;\n","// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport ReloadOutlinedSvg from \"@ant-design/icons-svg/es/asn/ReloadOutlined\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar ReloadOutlined = function ReloadOutlined(props, ref) {\n  return React.createElement(AntdIcon, Object.assign({}, props, {\n    ref: ref,\n    icon: ReloadOutlinedSvg\n  }));\n};\n\nReloadOutlined.displayName = 'ReloadOutlined';\nexport default React.forwardRef(ReloadOutlined);","import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport {\n    Row,\n    Col,\n    Button,\n    Radio,\n    // Spin,\n    // Popover,\n    // Collapse,\n    // Tag,\n} from 'antd';\nimport { ReloadOutlined } from '@ant-design/icons';\n\nimport './Monkey.less';\nimport { storeConnect, MapState, MapDispatch } from '@/store/index';\nimport wordTool, { WordType } from '@/utils/wordTool';\nimport { RadioChangeEvent } from 'antd/lib/radio';\n\ninterface LetterObj {\n    letter: string;\n    isCorrect: boolean | null;\n}\ninterface WordObj extends WordType {\n    letterArr: LetterObj[];\n    isCorrect: boolean | null;\n    isSkip: boolean;\n}\n\nconst SPACE_CODE = 32;\nconst BACKSPACE_CODE = 8;\n\nconst getCurrentWordEl = (mEl: any) => Array.from<any>(mEl.children);\n\nconst Monkey: React.FC<MapState & MapDispatch> = (props) => {\n    const inputEl = useRef(null);\n    const mainEl = useRef(null);\n    const caretElRef = useRef(null);\n    const wordsBaseRef = useRef(\n        wordTool.getWords(props.$state.root.wordsMode, props.$state.root.customerWords)\n    );\n    const coordinateRef = useRef([0, 0]);\n    const typeResultRef = useRef({\n        wpm: '',\n        right: 0,\n        wrong: 0,\n        acc: 0,\n        time: { begin: 0, secs: 0 },\n    });\n\n    const [isTyping, setIsTyping] = useState(false);\n    const [isCaretFlash, setIsCaretFlash] = useState(false);\n    const [isFadingTypeMain, setIsFadingTypeMain] = useState(false);\n    const [showTypeResult, setShowTypeResult] = useState(false);\n    const [userInput, setUserInput] = useState('');\n    const [wordArr, setWordArr] = useState<Array<WordObj>>([]);\n    const [caretLocation, setCaretLocation] = useState({ top: 0, left: 0 });\n    const [wordCount, setWordCount] = useState(30);\n\n    const setCaret = () => {\n        const coordinate = coordinateRef.current; // 此时坐标为下一个字母的坐标\n        const mainElRect = (mainEl.current as any).getBoundingClientRect();\n        const currentWordEl = getCurrentWordEl(mainEl.current)[coordinate[0]];\n        if (!currentWordEl) return;\n        const currentLetterArr = Array.from<any>(currentWordEl.getElementsByClassName('letter'));\n        if (currentLetterArr.length <= coordinate[1]) {\n            const letterRect = currentLetterArr[coordinate[1] - 1].getBoundingClientRect();\n            setCaretLocation({\n                top: letterRect.top - mainElRect.top + 2,\n                left: letterRect.left - mainElRect.left + letterRect.width,\n            });\n        } else {\n            const letterRect = currentLetterArr[coordinate[1]].getBoundingClientRect();\n            setCaretLocation({\n                top: letterRect.top - mainElRect.top + 2,\n                left: letterRect.left - mainElRect.left,\n            });\n        }\n    };\n\n    const inputForwardFunc = useCallback(\n        (keyCode: number, inputVal: string) => {\n            const coordinate = coordinateRef.current;\n            const isNewWordInputing =\n                userInput === '' || userInput.charAt(userInput.length - 1) === ' ';\n            let newCoordinate: number[];\n            if (keyCode === SPACE_CODE) {\n                if (isNewWordInputing) {\n                    newCoordinate = coordinate;\n                } else {\n                    newCoordinate = [coordinate[0] + 1, 0];\n                }\n            } else {\n                if (coordinate[1] >= wordArr[coordinate[0]].letterArr.length) {\n                    // 已经是单词最后一位（下标等于长度），却输入了字母\n                    const currentWordEl = getCurrentWordEl(mainEl.current)[coordinate[0]];\n                    const codeEl = document.createElement('code');\n                    codeEl.className = 'letter wrong extra-letter';\n                    codeEl.innerText = inputVal;\n                    currentWordEl.appendChild(codeEl);\n                }\n                newCoordinate = [coordinate[0], coordinate[1] + 1];\n            }\n            coordinateRef.current = newCoordinate;\n            setCaret();\n\n            setWordArr((_wordArr) => {\n                const letterObj = _wordArr[coordinate[0]].letterArr[coordinate[1]];\n                if (letterObj && keyCode !== SPACE_CODE) {\n                    // console.log(inputVal === letterObj.letter, letterObj);\n                    letterObj.isCorrect = inputVal === letterObj.letter;\n                    _wordArr[coordinate[0]].letterArr[coordinate[1]] = letterObj;\n                }\n                if (keyCode === SPACE_CODE && !isNewWordInputing) {\n                    // 是否没有输入完单词就空格跳过\n                    if (_wordArr[coordinate[0]].letterArr.some((l) => l.isCorrect === null)) {\n                        _wordArr[coordinate[0]].isSkip = true;\n                        _wordArr[coordinate[0]].isCorrect = false;\n                    } else {\n                        const currentWordEl = getCurrentWordEl(mainEl.current)[coordinate[0]];\n                        const extraLetterArr = currentWordEl.getElementsByClassName('extra-letter');\n                        if (!extraLetterArr || extraLetterArr.length === 0) {\n                            _wordArr[coordinate[0]].isCorrect = _wordArr[\n                                coordinate[0]\n                            ].letterArr.every((l) => l.isCorrect);\n                        } else {\n                            _wordArr[coordinate[0]].isCorrect = false;\n                        }\n                    }\n                }\n\n                // 是否 (新坐标已超出词组数) || (最后一个词、最后一个字母), 判断显示结果\n                if (\n                    newCoordinate[0] > _wordArr.length - 1 ||\n                    (coordinate[0] === _wordArr.length - 1 &&\n                        coordinate[1] === _wordArr[coordinate[0]].letterArr.length - 1)\n                ) {\n                    _wordArr[coordinate[0]].isCorrect = _wordArr[coordinate[0]].letterArr.every(\n                        (l) => l.isCorrect\n                    );\n                    typeResultRef.current.right = _wordArr.filter((w) => w.isCorrect).length;\n                    typeResultRef.current.wrong = _wordArr.length - typeResultRef.current.right;\n                    typeResultRef.current.acc = Math.round(\n                        (typeResultRef.current.right /\n                            (typeResultRef.current.right + typeResultRef.current.wrong)) *\n                            100\n                    );\n                    typeResultRef.current.time.secs = Math.round(\n                        (Date.now() - typeResultRef.current.time.begin) / 1000\n                    );\n                    typeResultRef.current.wpm = (\n                        typeResultRef.current.right /\n                        (typeResultRef.current.time.secs / 60)\n                    ).toFixed(2);\n                    setIsTyping(false);\n                    setIsFadingTypeMain(true);\n                    setTimeout(() => {\n                        setShowTypeResult(true);\n                    }, 150);\n                }\n                return _wordArr;\n            });\n            setUserInput((v) => {\n                if (keyCode === SPACE_CODE && (v === '' || v.charAt(v.length - 1) === ' ')) {\n                    return v;\n                }\n                return v + inputVal;\n            });\n        },\n        [userInput, wordArr]\n    );\n    const backspaceFunc = useCallback(() => {\n        const deleteChar = userInput.charAt(userInput.length - 1);\n        if (deleteChar === '') {\n            return;\n        }\n        const coordinate = coordinateRef.current;\n        let newCoordinate;\n        if (deleteChar === ' ') {\n            if (wordArr[coordinate[0] - 1].isCorrect) {\n                newCoordinate = coordinate;\n            } else {\n                if (wordArr[coordinate[0] - 1].isSkip) {\n                    const lIndex = wordArr[coordinate[0] - 1].letterArr.findIndex(\n                        (l) => l.isCorrect === null\n                    );\n                    newCoordinate = [coordinate[0] - 1, lIndex];\n                } else {\n                    const currentWordEl = getCurrentWordEl(mainEl.current)[coordinate[0] - 1];\n                    const currentLetterArr = currentWordEl.getElementsByClassName('letter');\n                    newCoordinate = [coordinate[0] - 1, currentLetterArr.length];\n                }\n            }\n        } else {\n            const currentWordEl = getCurrentWordEl(mainEl.current)[coordinate[0]];\n            const extraLetterArr = currentWordEl.getElementsByClassName('extra-letter');\n            if (extraLetterArr && extraLetterArr.length > 0) {\n                currentWordEl.removeChild(extraLetterArr[extraLetterArr.length - 1]);\n            }\n            newCoordinate = [coordinate[0], coordinate[1] - 1];\n        }\n        coordinateRef.current = newCoordinate;\n        setCaret();\n        setWordArr((_wordArr) => {\n            if (deleteChar === ' ') {\n                if (_wordArr[coordinate[0] - 1].isCorrect === false) {\n                    _wordArr[coordinate[0] - 1].isCorrect = null;\n                }\n            } else if (_wordArr[coordinate[0]].letterArr.length >= coordinate[1]) {\n                _wordArr[coordinate[0]].letterArr[coordinate[1] - 1].isCorrect = null;\n                _wordArr[coordinate[0]].isCorrect = null;\n            }\n            return _wordArr;\n        });\n        setUserInput((v) => {\n            let canDelete = true;\n            if (deleteChar === ' ') {\n                if (wordArr[coordinate[0] - 1].isCorrect) {\n                    canDelete = false;\n                }\n            }\n            return canDelete ? v.substring(0, v.length - 1) : v;\n        });\n    }, [userInput, wordArr]);\n\n    const inputKeyDown = (evt: React.KeyboardEvent) => {\n        // console.log(evt.key, evt.keyCode, evt.metaKey);\n        // 9: Tab\n        if (evt.keyCode !== 9) {\n            evt.preventDefault();\n            evt.stopPropagation();\n            evt.persist();\n        }\n        if (showTypeResult) {\n            return;\n        }\n        setIsCaretFlash(false);\n        if (evt.key.length === 1) {\n            if (typeResultRef.current.time.begin === 0) {\n                typeResultRef.current.time.begin = Date.now();\n            }\n            inputForwardFunc(evt.keyCode, evt.key);\n        } else if (evt.keyCode === BACKSPACE_CODE) {\n            backspaceFunc();\n        }\n    };\n\n    const focusToInput = () => {\n        setIsTyping(true);\n        (inputEl.current as any).focus();\n    };\n\n    const reloadWord = useCallback(() => {\n        coordinateRef.current = [0, 0];\n        wordsBaseRef.current = wordTool.shuffle(wordsBaseRef.current);\n        typeResultRef.current = {\n            wpm: '',\n            right: 0,\n            wrong: 0,\n            acc: 0,\n            time: { begin: 0, secs: 0 },\n        };\n        const extraLetterArr = (mainEl.current as any).getElementsByClassName('extra-letter');\n        if (extraLetterArr.length !== 0) {\n            Array.from<any>(extraLetterArr).forEach((etl) => {\n                etl.parentNode.removeChild(etl);\n            });\n        }\n        setWordArr(\n            wordTool.jsonCopy<WordType[]>(wordsBaseRef.current.slice(0, wordCount)).map((word) => {\n                return Object.assign({}, word, {\n                    letterArr: Array.from(word.text).map((letter) => ({\n                        letter,\n                        isCorrect: null,\n                    })),\n                    isCorrect: null,\n                    isSkip: false,\n                });\n            })\n        );\n        setUserInput('');\n        setIsFadingTypeMain(false);\n        setShowTypeResult(false);\n        setTimeout(() => {\n            focusToInput();\n            setCaret();\n        }, 10);\n    }, [wordCount]);\n\n    useEffect(() => {\n        wordsBaseRef.current = wordTool.getWords(\n            props.$state.root.wordsMode,\n            props.$state.root.customerWords\n        );\n        reloadWord();\n    }, [props.$state.root.wordsMode, props.$state.root.customerWords, reloadWord, wordCount]);\n\n    return (\n        <div className=\"Monkey\">\n            <div className=\"word-count-radio\">\n                <Radio.Group\n                    value={wordCount}\n                    size=\"small\"\n                    onChange={(e: RadioChangeEvent) => {\n                        setWordCount(e.target.value);\n                    }}\n                >\n                    <Radio.Button tabIndex={-1} value={20}>\n                        20\n                    </Radio.Button>\n                    <Radio.Button tabIndex={-1} value={30}>\n                        30\n                    </Radio.Button>\n                    <Radio.Button tabIndex={-1} value={40}>\n                        40\n                    </Radio.Button>\n                    <Radio.Button tabIndex={-1} value={50}>\n                        50\n                    </Radio.Button>\n                </Radio.Group>\n            </div>\n            <Row justify=\"center\" align=\"middle\">\n                <Col\n                    flex=\"900px\"\n                    className={`type-main-box ${isFadingTypeMain ? 'fading' : ''} ${\n                        showTypeResult ? 'hide' : ''\n                    }`}\n                >\n                    <div\n                        className={`caret ${isTyping ? (isCaretFlash ? 'flash' : '') : 'hide'}`}\n                        ref={caretElRef}\n                        style={{\n                            transform: `translate3d(${caretLocation.left}px,${caretLocation.top}px,0)`,\n                        }}\n                    ></div>\n                    <div className=\"words-box\" onClick={focusToInput} ref={mainEl}>\n                        {wordArr.map((word, wi) => (\n                            <div\n                                className={`word ${\n                                    word.isCorrect\n                                        ? 'correct'\n                                        : word.isCorrect === false\n                                        ? 'wrong'\n                                        : ''\n                                }`}\n                                key={wi}\n                            >\n                                <div className=\"label\">{word.label}</div>\n                                {word.letterArr?.map((letterObj, li) => (\n                                    <code\n                                        className={`letter ${\n                                            letterObj.isCorrect\n                                                ? 'correct'\n                                                : letterObj.isCorrect === false\n                                                ? 'wrong'\n                                                : ''\n                                        }`}\n                                        key={`${wi}_${li}`}\n                                    >\n                                        {letterObj.letter}\n                                    </code>\n                                ))}\n                            </div>\n                        ))}\n                    </div>\n                    <input\n                        className=\"hidden-input\"\n                        type=\"text\"\n                        ref={inputEl}\n                        onKeyDown={inputKeyDown}\n                        onBlur={() => {\n                            setIsTyping(false);\n                            // setIsCaretFlash(false);\n                        }}\n                        onFocus={() => {\n                            setIsTyping(true);\n                            setIsCaretFlash(true);\n                        }}\n                    />\n                    <div className=\"reload-line\">\n                        <Button\n                            className=\"reload-btn\"\n                            onClick={reloadWord}\n                            type=\"primary\"\n                            icon={<ReloadOutlined />}\n                        />\n                    </div>\n                    {/* {userInput} */}\n                    <div className={`tip-line ${!isCaretFlash ? 'hide' : ''}`}>\n                        <div>点击词块进入输入状态</div>\n                        <div>输入正确的拼音字母，然后空格</div>\n                        <div>\n                            输入状态下<code>Tab</code>后回车可以直接刷新\n                        </div>\n                        <div>觉得有意思可以打赏一下(#^.^#)(在上面↑↑)</div>\n                    </div>\n                </Col>\n                <Col flex=\"900px\" className={`type-result-box ${showTypeResult ? 'show' : ''}`}>\n                    {/* {JSON.stringify(typeResultRef.current)} */}\n                    <div className=\"type-result\">\n                        <Row justify=\"center\" gutter={80}>\n                            <Col span={6}>\n                                <div className=\"label\">WPM</div>\n                                <div className=\"show-data\">{typeResultRef.current.wpm}</div>\n                            </Col>\n                            <Col span={6}>\n                                <div className=\"label\">正确率</div>\n                                <div className=\"show-data\">{typeResultRef.current.acc}%</div>\n                            </Col>\n                            <Col span={6}>\n                                <div className=\"label\">用时</div>\n                                <div className=\"show-data\">{typeResultRef.current.time.secs}s</div>\n                            </Col>\n                        </Row>\n                    </div>\n                    <div className=\"reload-line\">\n                        <Button\n                            className=\"reload-btn\"\n                            onClick={reloadWord}\n                            type=\"primary\"\n                            icon={<ReloadOutlined />}\n                        />\n                    </div>\n                </Col>\n            </Row>\n        </div>\n    );\n};\n\nexport default storeConnect(Monkey);\n"],"sourceRoot":""}